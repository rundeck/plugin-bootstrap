package com.plugin.${javaPluginClass.toLowerCase()};

import com.dtolabs.rundeck.core.logging.LogEventControl;
import com.dtolabs.rundeck.core.logging.LogLevel;
import com.dtolabs.rundeck.core.logging.PluginLoggingContext;
import com.dtolabs.rundeck.core.plugins.Plugin;
import com.dtolabs.rundeck.plugins.descriptions.PluginDescription;
import com.dtolabs.rundeck.plugins.descriptions.PluginProperty;
import com.dtolabs.rundeck.plugins.descriptions.SelectLabels;
import com.dtolabs.rundeck.plugins.descriptions.SelectValues;
import com.dtolabs.rundeck.plugins.logging.LogFilterPlugin;
import java.util.HashMap;
import java.util.Map;

@Plugin(service="LogFilter",name="${sanitizedPluginName}")
@PluginDescription(title="${pluginName}", description="My plugin description")
public class ${javaPluginClass} implements LogFilterPlugin{

    @PluginProperty(name = "example header",title = "Example String",description = "Example description")
    private String header;

    @PluginProperty(
            title = "Data type",
            description = "Select datatype output",
            required = false
    )
    @SelectValues(
            values = {"text/plain", "text/html"},
            freeSelect = true
    )
    @SelectLabels(values = {"TEXT", "HTML"})
    String datatype = null;


    private boolean started = false;
    private StringBuilder buffer;

    @Override
    public void init(final PluginLoggingContext context) {
        started = true;
        buffer = new StringBuilder();

        if(datatype.equals("text/html")){
            buffer.append("<table class='table table-striped'>");
            buffer.append("<tr><th>Log Output</th></tr>");
        }
    }

    @Override
    public void handleEvent(final PluginLoggingContext context, final LogEventControl event) {
        if(event.getEventType().equals("log") && event.getLoglevel().equals(LogLevel.NORMAL) ){

            if(datatype.equals("text/html")){
                buffer.append("<tr><td>").append("<b>[").append(header).append("]</b> ").append(event.getMessage()).append("</td></tr>");
            }else{
                buffer.append("[").append(header).append("] ").append(event.getMessage()).append("\\n");
            }

            event.setLoglevel(LogLevel.DEBUG);
        }
    }

    @Override
    public void complete(final PluginLoggingContext context) {
        if (started && datatype!=null && buffer.length()>0) {

            if(datatype.equals("text/html")){
                buffer.append("</table>");
            }

            Map<String,String> type = new HashMap<>();
            type.put("content-data-type", datatype);


            context.log(
                    2,
                    buffer.toString(),
                    type
            );

        }
    }
}
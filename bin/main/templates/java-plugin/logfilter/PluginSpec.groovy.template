package com.plugin.${javaPluginClass.toLowerCase()}

import com.dtolabs.rundeck.core.dispatcher.ContextView
import com.dtolabs.rundeck.core.execution.workflow.DataOutput
import com.dtolabs.rundeck.core.logging.LogEventControl
import com.dtolabs.rundeck.core.logging.LogLevel
import com.dtolabs.rundeck.core.logging.PluginLoggingContext
import spock.lang.Specification

class ${javaPluginClass}Spec extends Specification {

    def "test preset type "() {
        given:
        def plugin = new ${javaPluginClass}()
        plugin.datatype = datatype
        plugin.header = "test"
        def sharedoutput = new DataOutput(ContextView.global())
        def context = Mock(PluginLoggingContext) {
            getOutputContext() >> sharedoutput
        }
        def events = []
        lines.each { line ->
            events << Mock(LogEventControl) {
                getMessage() >> line
                getEventType() >> 'log'
                getLoglevel() >> LogLevel.NORMAL
            }
        }
        when:
        plugin.init(context)
        events.each {
            plugin.handleEvent(context, it)
        }
        plugin.complete(context)

        then:
        1 * context.log(2, output, meta)

        where:
        datatype   | lines                             | output                | meta
        'text/plain' | ['1,2,3', '---', 'a,b,c']         | '[test] 1,2,3\\n[test] ---\\n[test] a,b,c\\n' | ['content-data-type': 'text/plain']
        'text/html' | ['1,2,3', '---', 'a,b,c']         | "<table class='table table-striped'><tr><th>Log Output</th></tr><tr><td><b>[test]</b> 1,2,3</td></tr><tr><td><b>[test]</b> ---</td></tr><tr><td><b>[test]</b> a,b,c</td></tr></table>" | ['content-data-type': 'text/html']
    }

}
package com.plugin.${javaPluginClass.toLowerCase()}

import com.dtolabs.rundeck.core.common.INodeEntry
import com.dtolabs.rundeck.core.common.NodeEntryImpl
import com.dtolabs.rundeck.core.execution.workflow.StepExecutionContext
import spock.lang.Specification

class ${javaPluginClass}Spec extends Specification {

    private INodeEntry create(String hostname, String rankAttr=null, String rankValue=null){
        INodeEntry iNodeEntry = NodeEntryImpl.create(hostname, hostname);

        if(null!=rankAttr) {
            iNodeEntry.getAttributes().put(rankAttr, rankValue);
        }
        return iNodeEntry;
    }

    def "simple test"() {

        given:
        INodeEntry node1 = create("Centos6", "memory", "1048");
        INodeEntry node2 = create("Centos7", "memory", "2048");
        INodeEntry node3 = create("Windows2016", "memory", "10240");
        INodeEntry node4 = create("Windows10", "memory", "4096");

        List<INodeEntry> nodes = Arrays.asList(node1, node2, node3, node4);

        def count=1

        StepExecutionContext context=Mock(StepExecutionContext)

        when:
        def orchestrator=new ${javaPluginClass}Orchestrator(count,context,nodes)

        then:
        orchestrator.nextNode()?.hostname!=null
        orchestrator.nextNode()?.hostname==null

    }


}
